///
/// Shader for the Split-step Fourier method of solving the Schrödinger equation
///
#pragma kernel HalfPotential
#pragma kernel Momentum

#define NTHREADS 8

static const float TWO_PI = 6.28318530718;
static const float2 I = float2(0, 1);


Texture2D<float2> Input;
RWTexture2D<float2> Output;
Texture2D<float1> Potential;

float TimeStep;
float ParticleMass;
float FourierFactor;
float FourierScaleSqX;
float FourierScaleSqY;
int2 Size;
int2 HalfSize;


float H;
float HBAR;

float PotentialScale;
float PotentialOffset;

float PotentialRotationX;
float PotentialRotationY;

inline float2 Mul(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

inline float2 MulI(float2 a)
{
    return float2(-a.y, a.x);
}

inline float2 Exp(float2 a)
{
    float temp = exp(a.x);
    return float2(temp * cos(fmod(a.y, TWO_PI)), temp * sin(fmod(a.y, TWO_PI)));
}

inline float2 ExpI(float a)
{
    float modA = fmod(a, TWO_PI);
    return float2(cos(modA), sin(modA));
}

inline float2 GetWaveIndex(uint x, uint y)
{
    float kx = (float) x;
    float ky = (float) y;
    if (kx >= HalfSize.x)
    {
        kx -= Size.x;
    }
                
    if (ky >= HalfSize.y)
    {
        ky -= Size.y;
    }
    return float2(kx, ky);
}

inline float GetPotential(uint2 index)
{
    float2 halfSizeF = float2(HalfSize.x, HalfSize.y);
    float2 normalizedPos = (index - halfSizeF) / halfSizeF;
    float tiltX = normalizedPos.x * PotentialRotationX;
    float tiltY = normalizedPos.y * PotentialRotationY;
    return (Potential[index] + PotentialOffset + tiltX + tiltY) * PotentialScale;
}

[numthreads(NTHREADS,NTHREADS,1)]
void HalfPotential (uint3 id : SV_DispatchThreadID)
{
    float expReal = -TimeStep * GetPotential(id.xy) / (2 * HBAR);
    Output[id.xy] = Mul(ExpI(expReal), Input[id.xy]);
}

[numthreads(NTHREADS,NTHREADS,1)]
void Momentum (uint3 id : SV_DispatchThreadID)
{
    float2 estK = GetWaveIndex(id.x, id.y);
    float estKSq = FourierScaleSqX * estK.x * estK.x + FourierScaleSqY * estK.y * estK.y;
    Output[id.xy] = Mul(ExpI(FourierFactor * estKSq), Input[id.xy]);
}