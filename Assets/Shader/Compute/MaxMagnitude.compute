///
/// Shader to calculate the squared maximum value of a texture with complex numbers in parallel. Based on the prefix-sum shader found at https://github.com/walbourn/directx-sdk-samples
///
#pragma kernel ScanPerGroup
#pragma kernel ScanBuckets

#define THREADS_PER_GROUP 128 // Ensure that this equals the 'threadsPerGroup' const in the host script.

Texture2D<float2> InputTexture;
StructuredBuffer<float> InputBuffer;
RWStructuredBuffer<float> Result;

uint TextureWidth;

groupshared float bucket[THREADS_PER_GROUP];

// Scan in each bucket.
[numthreads( THREADS_PER_GROUP, 1, 1 )]
void ScanPerGroup(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI: SV_GroupIndex) // CSScanInBucket
{
    float2 val = InputTexture[uint2(DTid.x % TextureWidth, DTid.x / TextureWidth)];
   
    float x = val.x * val.x + val.y * val.y;
    
    bucket[GI] = x;

    // Up sweep  
    [unroll]
    for (uint stride = 2; stride <= THREADS_PER_GROUP; stride <<= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if ((GI & (stride - 1)) == (stride - 1))
        {
            bucket[GI].x = max (bucket[GI], bucket[GI - stride / 2]);
        }
    }
    
    Result[DTid.x] = bucket[GI];
}


// Scan in each bucket.
[numthreads( THREADS_PER_GROUP, 1, 1 )]
void ScanBuckets(uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI: SV_GroupIndex) // CSScanInBucket
{
    float x = InputBuffer[DTid.x * THREADS_PER_GROUP - 1];
    bucket[GI] = x;

    // Up sweep  
    [unroll]
    for (uint stride = 2; stride <= THREADS_PER_GROUP; stride <<= 1)
    {
        GroupMemoryBarrierWithGroupSync();
        if ((GI & (stride - 1)) == (stride - 1))
        {
            bucket[GI].x = max (bucket[GI], bucket[GI - stride / 2]);
        }
    }
    
    Result[DTid.x] = bucket[GI];
}